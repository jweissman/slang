Slang {
  Program = ListOf<Stmt, #br> #br?

  Stmt 
    = Comment 
    | Assignment
    | Expr
  
  Defun
    = Arglist "=>" (Block | Expr)
   
  Assignment = (ListIndex | ident) "=" Expr

  Block = "{" Program "}"

  Expr
    = Defun
    | AddExp

  AddExp
    = AddExp "+" MulExp  -- plus
    | AddExp "-" MulExp  -- minus
    | MulExp

  MulExp
    = MulExp "*" ExpExp  -- times
    | MulExp "/" ExpExp  -- divide
    | ExpExp

  ExpExp
    = PriExp "^" ExpExp  -- power
    | PriExp

  PriExp
    = "(" Expr ")"  -- paren
    | "+" PriExp   -- pos
    | "-" PriExp   -- neg
    | PriVal
  
  PriVal = StrLit
         | ArrayLiteral
         | HashLit
         | ListIndex
         | Funcall
         | DotAccess
        //  | LambdaFuncall
         | ident
         | number
         
  DotAccess 
    = (DotAccess | ident) "." ident

  HashLit 
    = "{" ListOf<(HashKeyVal | Dots), ","> "}"

  HashKeyVal = ident ":" Expr
 
  Callable = Funcall
           | DotAccess
           | ident

  Funcall
    = Callable Arglist
    
  // LambdaFuncall = Callable ArglistOmittingParens
  
  Arglist
    = "(" ListOf<Expr, ","> ")"
    
  ArglistOmittingParens
    = ListOf<AddExp, ",">

  ArrayLiteral
    = "[" ListOf<(Expr | Dots), ","> "]"

  Dots
    = "..." (Funcall | ListIndex | ident)
  
  ListIndex
    = (ident) "[" Expr "]"

  StrLit
    = "'" #(~"'" any)+ "'"

  Comment
    = "//" #(~"\n" any)+ "\n"*

  ident  (an identifier)
    = letter alnum*

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole

  br
    = "\r" | "\n"
    | ";"
       
}