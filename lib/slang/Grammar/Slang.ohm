
Slang {
  Program = listOf<Stmt, br> br?

  Stmt 
    = Comment 
    | Assignment
    | LambdaFuncall
    | Expr
    
  Defun
    = (ParamList | ListOf<Param, ",">) "=>" (Block | Expr)

  Assignment = (ListIndex | ident) "=" Expr

  Block = "{" Program "}"

  Expr = Defun
    | AddExp


  AddExp
    = AddExp "+" MulExp  -- plus
    | AddExp "-" MulExp  -- minus
    | MulExp

  MulExp
    = MulExp "*" ExpExp  -- times
    | MulExp "/" ExpExp  -- divide
    | ExpExp

  ExpExp
    = PriExp "^" ExpExp  -- power
    | PriExp

  PriExp
    = "(" Expr ")"  -- paren
    | "+" PriExp   -- pos
    | "-" PriExp   -- neg
    | PriVal
  
  PriVal = StrLit
         | ArrayLiteral
         | HashLit
         | ListIndex
         | Funcall
         | DotAccess
         | ident
         | number

  DotAccess 
    = (DotAccess | ident) "." ident

  HashLit 
    = "{" ListOf<(HashKeyVal | Dots), ","> "}"

  HashKeyVal = ident ":" Expr

  Callable = (Funcall | DotAccess | ident)

  Funcall = Callable "(" listOf<Arg, ","> ")"
  LambdaFuncall = (DotAccess | ident) #" " (~#br nonemptyListOf<Arg, ",">)

  Arg = LambdaFuncall | Expr
  //ArgList = listOf<Arg, ",">

  Param = ident
  ParamList
    = "(" ListOf<Param, ","> ")"

  ArrayLiteral
    = "[" ListOf<(Expr | Dots), ","> "]"

  Dots
    = "..." (Funcall | ListIndex | ident)

  ListIndex
    = (ident) "[" Expr "]"

  StrLit
    = "'" #(~"'" any)+ "'"

  Comment
    = "//" #(~newline any)+ newline*
  newline = "\n"

  ident  (an identifier)
   = letter alnum*

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole

  br
    = "\r" | "\n"
    | ";"

}
