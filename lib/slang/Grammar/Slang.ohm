
Slang {
  Program = listOf<(BasicStmt | Comment), br> br?

  BasicStmt 
    = 
    | Assignment
    | LambdaFuncall
    | Expr
    
  Defun
    = ParamList "=>" (Block | BasicStmt)

  Assignment = (ListIndex | DotAccess | ident) "=" Expr

  Block = "{" Program "}"

  Expr = Defun
    | Ternary
    | Comparison
    | AddExp
    
  Comparison
    = AddExp ">"  AddExp -- gt
    | AddExp "<"  AddExp -- lt
    | AddExp "==" AddExp -- eq
    | AddExp "<=" AddExp -- lte
    | AddExp ">=" AddExp -- gte
    

  Ternary = (~#"?" Condition) "?" Expr ":" Expr

  Condition = Comparison | Expr

  AddExp
    = AddExp "+" MulExp  -- plus
    | AddExp "-" MulExp  -- minus
    | MulExp

  MulExp
    = MulExp "*" ExpExp  -- times
    | MulExp "/" ExpExp  -- divide
    | ExpExp

  ExpExp
    = PriExp "^" ExpExp  -- power
    | PriExp

  PriExp
    = "(" Expr ")"  -- paren
    | "+" PriExp   -- pos
    | "-" PriExp   -- neg
    | PriVal
  
  PriVal = StrLit
         | ArrayLiteral
         | HashLit
         | ListIndex
         | Funcall
         | DotAccess
         | LenLit
         | LambdaFuncall
         | Turnstile
         | ident
         | number

  Turnstile
    = "|-" Expr -- rtack
    | "-|" Expr -- ltack
    | "|*" Expr -- bubble
    | "&"  (Funcall) -- stream
    // | "*|" Expr -- lbubble
    // | "=|" Expr -- double_ltack
    // | "|=" Expr -- double_rtack

  LenLit
    = "#" Expr

  DotAccess 
    = (DotAccess | ident) "." ident

  HashLit 
    = "{" ListOf<(HashKeyVal | Dots), ","> "}"

  HashKeyVal = ident ":" Expr

  Callable = Funcall | DotAccess | ident

  Arg = LambdaFuncall | Expr

  Funcall = Callable "(" listOf<Arg, ","> ")"
  LambdaFuncall = (DotAccess | ident) #" " (~#br nonemptyListOf<Arg, ",">)

  Param = ident
  ParamList
    = FormalParamList
    | InformalParamList
  
  FormalParamList = "(" ListOf<Param, ","> ")"
  InformalParamList = ListOf<Param, ",">

  ArrayLiteral
    = "[" ListOf<(Expr | Dots), ","> "]"

  Dots
    = "..." (Funcall | ListIndex | DotAccess | PriExp | ident)

  ListIndex
    = (ident) "[" Expr "]"

  StrLit
    = "'" #(~"'" any)+ "'"

  Comment
    = "//" #(~newline any)+ newline*
  
  // Load
    // = "load" ident -- load
    // | "import" ident "from" ident -- import
    // | "export" ident -- export

  newline = "\n"

  ident  (an identifier)
   = letter alnum*

  number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole

  br
    = "\r" | "\n"
    | ";"

}
