const {
    Identifier,
    BinaryExpression,
    FunCall,
    Comment,
    Compare,
    HashLiteral,
    DotInterpolation,
    DotAccessor,
    Defun,
    LengthLiteral,
    Ternary,
    Assignment,
    ArrayLiteral,
    ArrayLookup,
    Program,
    Turnstile,
    Block,
    ArgList,
    IntegerLiteral,
    KeyValuePair,
    StringLiteral,
    NegatedExpr,
} = require('./nodes')
const helpers = {
  intLit: v => new IntegerLiteral(v),
  binaryExpr: (op, e1, e2) => new BinaryExpression(op, e1, e2),
  funCall: (id, args = new ArgList([])) => new FunCall(id, args),
  idExpr: s => new Identifier(s),
  argList: args => new ArgList(args),
  assignment: (id, e) => new Assignment(id, e),
  defun: (args, e) => new Defun(args, e),
  program: stmts => new Program(stmts),
  strLit: txt => new StringLiteral(txt),
  arrLit: elems => new ArrayLiteral(elems),
  arrLookup: (arr, index) => new ArrayLookup(arr, index),
  ellipsis: e => new DotInterpolation(e),
  negated: e => new NegatedExpr(e),
  hshLit: pairs => new HashLiteral(pairs),
  kvPair: (k, v) => new KeyValuePair(k, v),
  dotAccess: (t, a) => new DotAccessor(t, a),
  block: p => new Block(p),
  comment: msg => new Comment(msg),
  compare: (op, e1, e2) => new Compare(op, e1, e2),
  ternary: (cond, e1, e2) => new Ternary(cond, e1, e2),
  lenLit: (e) => new LengthLiteral(e),
  turnstile: (tack, e) => new Turnstile(tack, e),
}

module.exports = helpers
